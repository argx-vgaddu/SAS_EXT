"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPaginationHTML = getPaginationHTML;
// Helper function for variable icons in HTML generation
function getVariableIconString(variable) {
    if (variable.type === 'character') {
        return 'üìù';
    }
    else if (variable.type === 'numeric') {
        if (variable.format === 'DATE' || variable.format === 'DATETIME') {
            return 'üìÖ';
        }
        else if (variable.format === 'TIME') {
            return 'üïê';
        }
        else if (variable.format === 'DOLLAR') {
            return 'üí∞';
        }
        else if (variable.format === 'PERCENT') {
            return 'üìä';
        }
        else {
            return 'üî¢';
        }
    }
    else {
        return '‚ùì';
    }
}
function getPaginationHTML(metadata) {
    var fileName = metadata.file_path.split(/[\\/]/).pop();
    return "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src 'unsafe-inline'; script-src 'unsafe-inline' 'unsafe-eval';\">\n        <title>".concat(fileName, " - SAS Dataset Viewer</title>\n        <style>\n            body {\n                font-family: var(--vscode-font-family);\n                background: var(--vscode-editor-background);\n                color: var(--vscode-foreground);\n                margin: 0;\n                padding: 10px;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n                /* Performance optimization */\n                contain: layout style;\n            }\n\n            .main-container {\n                display: flex;\n                gap: 15px;\n                flex: 1;\n                min-height: 0;\n            }\n\n            .sidebar {\n                width: 320px;\n                min-width: 280px;\n                flex-shrink: 0;\n                background: var(--vscode-sideBar-background);\n                border: 1px solid var(--vscode-panel-border);\n                border-radius: 6px;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n                position: relative;\n                /* Performance: isolate sidebar rendering */\n                contain: layout style paint;\n                will-change: transform;\n            }\n\n            .sidebar-header {\n                padding: 15px;\n                background: var(--vscode-sideBarSectionHeader-background);\n                border-bottom: 1px solid var(--vscode-panel-border);\n            }\n\n            .sidebar-title {\n                font-size: 14px;\n                font-weight: 600;\n                margin-bottom: 8px;\n            }\n\n            .dataset-label {\n                font-size: 13px;\n                color: var(--vscode-descriptionForeground);\n                margin-bottom: 10px;\n                font-style: italic;\n            }\n\n            .variable-controls {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 10px;\n            }\n\n            .selected-count {\n                font-size: 11px;\n                color: var(--vscode-descriptionForeground);\n            }\n\n            .display-mode {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                font-size: 11px;\n            }\n\n            .display-select {\n                padding: 2px 6px;\n                background: var(--vscode-dropdown-background);\n                color: var(--vscode-dropdown-foreground);\n                border: 1px solid var(--vscode-dropdown-border);\n                border-radius: 2px;\n                font-size: 11px;\n            }\n\n            .variables-container {\n                flex: 1;\n                overflow-y: auto;\n                overflow-x: visible;\n                padding: 8px;\n                position: relative;\n                /* Performance: optimize scrolling */\n                will-change: scroll-position;\n                contain: layout style paint;\n            }\n\n            .variable-item {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                padding: 6px 8px;\n                border-radius: 3px;\n                font-size: 12px;\n                cursor: pointer;\n                user-select: none;\n                margin-bottom: 2px;\n                position: relative;\n            }\n\n            .variable-item:hover {\n                background: var(--vscode-list-hoverBackground);\n            }\n\n            .variable-item input[type=\"checkbox\"] {\n                cursor: pointer;\n                flex-shrink: 0;\n                z-index: 2;\n                width: 14px !important;\n                height: 14px !important;\n                margin: 0;\n                margin-right: 4px;\n                vertical-align: middle;\n                opacity: 1 !important;\n                visibility: visible !important;\n                display: inline-block !important;\n            }\n\n            .variable-text {\n                flex: 1;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                cursor: help;\n                position: relative;\n                display: inline-block;\n                padding-right: 8px; /* Add some padding since we removed the type badge */\n            }\n\n            /* Simplified tooltip for better performance */\n            .variable-text[data-tooltip]:hover::after {\n                content: attr(data-tooltip);\n                position: absolute;\n                background: var(--vscode-editorHoverWidget-background);\n                color: var(--vscode-editorHoverWidget-foreground);\n                border: 1px solid var(--vscode-editorHoverWidget-border);\n                padding: 8px 12px;\n                border-radius: 4px;\n                font-size: 12px;\n                white-space: pre-line;\n                z-index: 10000;\n                max-width: 400px;\n                pointer-events: none;\n                top: 100%;\n                left: 0;\n                margin-top: 5px;\n                /* Performance: use transform for GPU acceleration */\n                transform: translateZ(0);\n            }\n\n            /* Arrow indicator for tooltip */\n            .variable-text[data-tooltip]:hover::before {\n                content: '';\n                position: absolute;\n                top: 100%;\n                left: 10px;\n                width: 0;\n                height: 0;\n                border-left: 6px solid transparent;\n                border-right: 6px solid transparent;\n                border-bottom: 6px solid var(--vscode-editorHoverWidget-border);\n                z-index: 10001;\n                margin-top: -1px;\n            }\n\n\n            .content-area {\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-width: 0;\n            }\n\n            .header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 15px;\n                background: var(--vscode-sideBar-background);\n                border-radius: 6px;\n                border: 1px solid var(--vscode-panel-border);\n                margin-bottom: 15px;\n            }\n\n            .dataset-info {\n                font-size: 14px;\n                font-weight: 600;\n            }\n\n            .pagination-info {\n                font-size: 12px;\n                color: var(--vscode-descriptionForeground);\n            }\n\n            .table-container {\n                flex: 1;\n                overflow: auto;\n                border: 1px solid var(--vscode-panel-border);\n                border-radius: 4px;\n                margin-bottom: 15px;\n                /* Performance: isolate table rendering */\n                contain: layout style paint;\n                will-change: contents;\n            }\n\n            table {\n                width: 100%;\n                border-collapse: collapse;\n                font-size: 13px;\n                min-width: max-content;\n            }\n\n            thead {\n                position: sticky;\n                top: 0;\n                z-index: 10;\n                background: var(--vscode-editor-background);\n            }\n\n            th {\n                background: var(--vscode-editor-background);\n                border: 1px solid var(--vscode-panel-border);\n                padding: 8px;\n                text-align: left;\n                font-weight: 600;\n                white-space: nowrap;\n                cursor: help;\n                position: relative;\n            }\n\n            /* Table header tooltips */\n            th[data-tooltip]:hover::after {\n                content: attr(data-tooltip);\n                position: absolute;\n                background: var(--vscode-editorHoverWidget-background);\n                color: var(--vscode-editorHoverWidget-foreground);\n                border: 1px solid var(--vscode-editorHoverWidget-border);\n                padding: 8px 12px;\n                border-radius: 4px;\n                font-size: 12px;\n                white-space: pre-line;\n                z-index: 10000;\n                min-width: 250px;\n                max-width: 400px;\n                width: max-content;\n                box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n                pointer-events: none;\n                top: 100%;\n                left: 50%;\n                transform: translateX(-50%);\n                margin-top: 5px;\n            }\n            \n            /* Ensure tooltip doesn't go off-screen on the left */\n            th:first-child[data-tooltip]:hover::after,\n            th:nth-child(2)[data-tooltip]:hover::after,\n            th:nth-child(3)[data-tooltip]:hover::after {\n                left: 0;\n                transform: translateX(0);\n            }\n            \n            /* Ensure tooltip doesn't go off-screen on the right */\n            th:nth-last-child(1)[data-tooltip]:hover::after,\n            th:nth-last-child(2)[data-tooltip]:hover::after,\n            th:nth-last-child(3)[data-tooltip]:hover::after {\n                left: auto;\n                right: 0;\n                transform: translateX(0);\n            }\n            \n            /* Arrow indicator for table header tooltips */\n            th[data-tooltip]:hover::before {\n                content: '';\n                position: absolute;\n                top: 100%;\n                left: 50%;\n                transform: translateX(-50%);\n                width: 0;\n                height: 0;\n                border-left: 6px solid transparent;\n                border-right: 6px solid transparent;\n                border-bottom: 6px solid var(--vscode-editorHoverWidget-border);\n                z-index: 10001;\n                margin-top: -1px;\n            }\n            \n            /* Adjust arrow for left-aligned tooltips */\n            th:first-child[data-tooltip]:hover::before,\n            th:nth-child(2)[data-tooltip]:hover::before,\n            th:nth-child(3)[data-tooltip]:hover::before {\n                left: 20px;\n                transform: translateX(0);\n            }\n            \n            /* Adjust arrow for right-aligned tooltips */\n            th:nth-last-child(1)[data-tooltip]:hover::before,\n            th:nth-last-child(2)[data-tooltip]:hover::before,\n            th:nth-last-child(3)[data-tooltip]:hover::before {\n                left: auto;\n                right: 20px;\n                transform: translateX(0);\n            }\n\n            td {\n                border: 1px solid var(--vscode-panel-border);\n                padding: 6px 8px;\n                max-width: 300px;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n            }\n\n            tr:hover {\n                background: var(--vscode-list-hoverBackground);\n            }\n\n            .filter-section {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 15px;\n                background: var(--vscode-sideBar-background);\n                border-radius: 6px;\n                border: 1px solid var(--vscode-panel-border);\n                margin-bottom: 15px;\n            }\n\n            .where-input {\n                flex: 1;\n                padding: 6px 12px;\n                background: var(--vscode-input-background);\n                color: var(--vscode-input-foreground);\n                border: 1px solid var(--vscode-input-border);\n                border-radius: 3px;\n                margin-right: 10px;\n                font-size: 13px;\n            }\n\n            .where-input:focus {\n                outline: 1px solid var(--vscode-focusBorder);\n            }\n\n            .filter-info {\n                font-size: 12px;\n                color: var(--vscode-descriptionForeground);\n                font-style: italic;\n            }\n\n            .pagination-controls {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 15px;\n                background: var(--vscode-sideBar-background);\n                border-radius: 6px;\n                border: 1px solid var(--vscode-panel-border);\n            }\n\n            .page-info {\n                display: flex;\n                align-items: center;\n                gap: 15px;\n                font-size: 13px;\n            }\n\n            .page-size-control {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n            }\n\n            .btn {\n                padding: 6px 12px;\n                background: var(--vscode-button-background);\n                color: var(--vscode-button-foreground);\n                border: none;\n                border-radius: 3px;\n                cursor: pointer;\n                font-size: 12px;\n                min-width: 80px;\n            }\n\n            .btn:hover {\n                background: var(--vscode-button-hoverBackground);\n            }\n\n            .btn:disabled {\n                background: var(--vscode-button-secondaryBackground);\n                color: var(--vscode-button-secondaryForeground);\n                cursor: not-allowed;\n                opacity: 0.6;\n            }\n\n            .btn-nav {\n                min-width: 100px;\n            }\n\n            .page-input {\n                width: 60px;\n                padding: 4px 8px;\n                background: var(--vscode-input-background);\n                color: var(--vscode-input-foreground);\n                border: 1px solid var(--vscode-input-border);\n                border-radius: 2px;\n                text-align: center;\n            }\n\n            .page-size-select {\n                padding: 4px 8px;\n                background: var(--vscode-dropdown-background);\n                color: var(--vscode-dropdown-foreground);\n                border: 1px solid var(--vscode-dropdown-border);\n                border-radius: 2px;\n            }\n\n            .loading {\n                text-align: center;\n                padding: 40px;\n                color: var(--vscode-descriptionForeground);\n            }\n\n            /* Custom spinner animation */\n            .spinner {\n                width: 40px;\n                height: 40px;\n                margin: 20px auto;\n                border: 4px solid var(--vscode-panel-border);\n                border-top: 4px solid var(--vscode-focusBorder);\n                border-radius: 50%;\n                animation: spin 1s linear infinite;\n            }\n\n            @keyframes spin {\n                0% { transform: rotate(0deg); }\n                100% { transform: rotate(360deg); }\n            }\n\n            /* Skeleton loader for table rows */\n            .skeleton-row {\n                display: table-row;\n                animation: pulse 1.5s ease-in-out infinite;\n            }\n\n            .skeleton-cell {\n                display: table-cell;\n                padding: 8px;\n                border: 1px solid var(--vscode-panel-border);\n            }\n\n            .skeleton-content {\n                height: 14px;\n                background: linear-gradient(90deg,\n                    var(--vscode-panel-border) 25%,\n                    var(--vscode-badge-background) 50%,\n                    var(--vscode-panel-border) 75%);\n                background-size: 200% 100%;\n                animation: shimmer 1.5s infinite;\n                border-radius: 2px;\n            }\n\n            @keyframes shimmer {\n                0% { background-position: 200% 0; }\n                100% { background-position: -200% 0; }\n            }\n\n            @keyframes pulse {\n                0%, 100% { opacity: 1; }\n                50% { opacity: 0.6; }\n            }\n\n            /* Smooth fade transitions */\n            .fade-in {\n                animation: fadeIn 0.3s ease-in;\n            }\n\n            @keyframes fadeIn {\n                from { opacity: 0; }\n                to { opacity: 1; }\n            }\n\n            /* Modal styles for metadata popup */\n            .modal-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.6);\n                z-index: 10000;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                animation: fadeIn 0.2s ease-in;\n            }\n\n            .modal-content {\n                background: var(--vscode-editor-background);\n                border: 1px solid var(--vscode-panel-border);\n                border-radius: 6px;\n                padding: 20px;\n                max-width: 90%;\n                max-height: 80vh;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n            }\n\n            .modal-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 20px;\n                padding-bottom: 10px;\n                border-bottom: 1px solid var(--vscode-panel-border);\n            }\n\n            .modal-header h2 {\n                margin: 0;\n                font-size: 18px;\n                font-weight: 600;\n            }\n\n            .modal-body {\n                overflow: auto;\n                flex: 1;\n            }\n\n            .metadata-table {\n                width: 100%;\n                border-collapse: collapse;\n                font-size: 13px;\n            }\n\n            .metadata-table th {\n                background: var(--vscode-list-hoverBackground);\n                border: 1px solid var(--vscode-panel-border);\n                padding: 10px;\n                text-align: left;\n                font-weight: 600;\n                position: sticky;\n                top: 0;\n                z-index: 1;\n            }\n\n            .metadata-table td {\n                border: 1px solid var(--vscode-panel-border);\n                padding: 8px 10px;\n                max-width: 300px;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n            }\n\n            .metadata-table tr:hover {\n                background: var(--vscode-list-hoverBackground);\n            }\n\n            .close-btn {\n                padding: 6px 12px;\n                background: var(--vscode-button-background);\n                color: var(--vscode-button-foreground);\n                border: none;\n                border-radius: 3px;\n                cursor: pointer;\n                font-size: 12px;\n            }\n\n            .close-btn:hover {\n                background: var(--vscode-button-hoverBackground);\n            }\n\n            .error {\n                text-align: center;\n                padding: 40px;\n                color: var(--vscode-errorForeground);\n                background: var(--vscode-errorBackground);\n                border-radius: 4px;\n                margin: 20px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <div class=\"dataset-info\">\n                <strong>").concat(fileName, "</strong> - <span id=\"total-rows-display\">").concat(metadata.total_rows.toLocaleString(), "</span> rows, ").concat(metadata.total_variables, " variables\n            </div>\n            <div class=\"pagination-info\">\n                <span id=\"current-range\">Loading...</span>\n            </div>\n            <div style=\"margin-left: auto; display: flex; gap: 10px; align-items: center;\">\n                <div class=\"display-mode\" style=\"display: flex; align-items: center; gap: 5px;\">\n                    <label style=\"font-size: 12px;\">Show:</label>\n                    <select id=\"display-mode\" class=\"display-select\" style=\"padding: 2px 4px; font-size: 12px;\">\n                        <option value=\"name\" selected>Names</option>\n                        <option value=\"label\">Labels</option>\n                        <option value=\"both\">Both</option>\n                    </select>\n                </div>\n                <button class=\"btn\" id=\"metadata-btn\">\uD83D\uDCCA Metadata</button>\n            </div>\n        </div>\n\n        <div class=\"main-container\">\n            <div class=\"sidebar\">\n                <div class=\"sidebar-header\">\n                    <div class=\"sidebar-title\">Dataset Variables</div>\n                    <div class=\"dataset-label\">").concat(metadata.dataset_label || fileName, "</div>\n\n                    <div class=\"variable-controls\">\n                        <div class=\"selected-count\" id=\"selected-count\">33 selected</div>\n                    </div>\n\n                    <!-- KEEP/DROP section at top -->\n                    <div style=\"margin-top: 12px; padding: 10px; background: var(--vscode-editor-background); border-radius: 4px;\">\n                        <div style=\"margin-bottom: 10px;\">\n                            <label for=\"keep-input\" style=\"display: block; font-size: 11px; margin-bottom: 4px; font-weight: bold; color: var(--vscode-foreground);\">KEEP (comma-separated):</label>\n                            <input type=\"text\" id=\"keep-input\"\n                                   placeholder=\"e.g., USUBJID, AGE, WEIGHT\"\n                                   style=\"width: 100%; padding: 4px; font-size: 11px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border); border-radius: 3px;\"\n                                   title=\"Keep only these variables (comma-separated, case-insensitive)\">\n                            <button class=\"btn\" id=\"apply-keep-btn\" style=\"width: 100%; margin-top: 4px; font-size: 11px;\">Apply Keep</button>\n                        </div>\n\n                        <div>\n                            <label for=\"drop-input\" style=\"display: block; font-size: 11px; margin-bottom: 4px; font-weight: bold; color: var(--vscode-foreground);\">DROP (comma-separated):</label>\n                            <input type=\"text\" id=\"drop-input\"\n                                   placeholder=\"e.g., DESC_LONG, NOTE, CHAR_MIXED\"\n                                   style=\"width: 100%; padding: 4px; font-size: 11px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border); border-radius: 3px;\"\n                                   title=\"Drop these variables (comma-separated, case-insensitive)\">\n                            <button class=\"btn\" id=\"apply-drop-btn\" style=\"width: 100%; margin-top: 4px; font-size: 11px;\">Apply Drop</button>\n                        </div>\n                    </div>\n\n                    <!-- Select/Clear buttons just above variable list -->\n                    <div style=\"display: flex; gap: 8px; margin-top: 12px;\">\n                        <button class=\"btn\" id=\"select-all-btn\" style=\"flex: 1; font-size: 11px;\">Select All</button>\n                        <button class=\"btn\" id=\"deselect-all-btn\" style=\"flex: 1; font-size: 11px;\">Clear All</button>\n                    </div>\n                </div>\n                \n                <div class=\"variables-container\" id=\"variables-container\">\n                    <!-- Variables will be populated by JavaScript -->\n                </div>\n            </div>\n\n            <div class=\"content-area\">\n                <div class=\"filter-section\">\n                    <div style=\"display: flex; align-items: center; flex: 1; gap: 10px;\">\n                        <label for=\"where-input\">WHERE:</label>\n                        <input type=\"text\" id=\"where-input\" class=\"where-input\"\n                               placeholder=\"e.g., age > 30 AND country = 'USA' (case-insensitive)\"\n                               title=\"Filter using WHERE conditions. Variable names are case-insensitive. Supports AND/OR or &/| operators\">\n                        <button class=\"btn\" id=\"apply-filter-btn\">Apply Filter</button>\n                        <button class=\"btn\" id=\"clear-filter-btn\">Clear</button>\n                    </div>\n                    <div class=\"filter-info\" id=\"filter-info\">\n                        No filter applied - showing all rows\n                    </div>\n                </div>\n\n                <div class=\"table-container\">\n                    <div id=\"loading-message\" class=\"loading\">\n                        <div class=\"spinner\"></div>\n                        <div id=\"loading-text\">Loading data...</div>\n                    </div>\n                    <div id=\"error-message\" class=\"error\" style=\"display: none;\"></div>\n                    <table id=\"data-table\" style=\"display: none;\">\n                        <thead id=\"table-header\">\n                            <tr></tr>\n                        </thead>\n                        <tbody id=\"table-body\"></tbody>\n                    </table>\n                </div>\n\n                <div class=\"pagination-controls\">\n                    <div class=\"page-info\">\n                        <button class=\"btn btn-nav\" id=\"first-btn\" disabled>\u23EE\uFE0F First</button>\n                        <button class=\"btn btn-nav\" id=\"prev-btn\" disabled>\u2B05\uFE0F Previous</button>\n                        <span>Page <input type=\"number\" id=\"page-input\" class=\"page-input\" value=\"1\" min=\"1\"> of <span id=\"total-pages\">1</span></span>\n                        <button class=\"btn btn-nav\" id=\"next-btn\">Next \u27A1\uFE0F</button>\n                        <button class=\"btn btn-nav\" id=\"last-btn\">Last \u23ED\uFE0F</button>\n                    </div>\n                    \n                    <div class=\"page-size-control\">\n                        <label>Rows per page:</label>\n                        <select id=\"page-size-select\" class=\"page-size-select\">\n                            <option value=\"50\">50</option>\n                            <option value=\"100\" selected>100</option>\n                            <option value=\"200\">200</option>\n                            <option value=\"500\">500</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <script>\n            // Helper function to get variable icons\n            function getVariableIcon(variable) {\n                if (variable.type === 'character') {\n                    return '\uD83D\uDCDD';\n                } else if (variable.type === 'numeric') {\n                    if (variable.format === 'DATE' || variable.format === 'DATETIME') {\n                        return '\uD83D\uDCC5';\n                    } else if (variable.format === 'TIME') {\n                        return '\uD83D\uDD50';\n                    } else if (variable.format === 'DOLLAR') {\n                        return '\uD83D\uDCB0';\n                    } else if (variable.format === 'PERCENT') {\n                        return '\uD83D\uDCCA';\n                    } else {\n                        return '\uD83D\uDD22';\n                    }\n                } else {\n                    return '\u2753';\n                }\n            }\n            // Acquire VS Code API\n            const vscode = acquireVsCodeApi();\n\n            // Pagination state\n            let currentPage = 1;\n            let pageSize = parseInt(document.getElementById('page-size-select')?.value || '100'); // Respect user preference\n            let totalRows = ").concat(metadata.total_rows, ";\n            let filteredRows = totalRows; // Total rows after filtering\n            let totalPages = Math.ceil(filteredRows / pageSize);\n            let currentData = [];\n            let columns = [];\n            let selectedColumns = [];\n            let allVariables = ").concat(JSON.stringify(metadata.variables), ";\n            let displayMode = 'name';\n            let isLoading = false;\n            let currentWhereClause = '';\n\n            // DOM elements\n            const table = document.getElementById('data-table');\n            const tbody = document.getElementById('table-body');\n            const header = document.getElementById('table-header').querySelector('tr');\n            const loadingMessage = document.getElementById('loading-message');\n            const errorMessage = document.getElementById('error-message');\n            const metadataBtn = document.getElementById('metadata-btn');\n            \n            const firstBtn = document.getElementById('first-btn');\n            const prevBtn = document.getElementById('prev-btn');\n            const nextBtn = document.getElementById('next-btn');\n            const lastBtn = document.getElementById('last-btn');\n            const pageInput = document.getElementById('page-input');\n            const totalPagesSpan = document.getElementById('total-pages');\n            const pageSizeSelect = document.getElementById('page-size-select');\n            const currentRangeSpan = document.getElementById('current-range');\n            const totalRowsDisplay = document.getElementById('total-rows-display');\n            \n            // Filter elements\n            const whereInput = document.getElementById('where-input');\n            const applyFilterBtn = document.getElementById('apply-filter-btn');\n            const clearFilterBtn = document.getElementById('clear-filter-btn');\n            const filterInfo = document.getElementById('filter-info');\n            \n            // Variable selection elements\n            const selectedCountSpan = document.getElementById('selected-count');\n            const displayModeSelect = document.getElementById('display-mode');\n            const selectAllBtn = document.getElementById('select-all-btn');\n            const deselectAllBtn = document.getElementById('deselect-all-btn');\n            const variablesContainer = document.getElementById('variables-container');\n\n            // Initialize\n            function init() {\n                // Populate variables list dynamically\n                populateVariablesList();\n\n                // Initialize selected columns with all variables\n                selectedColumns = allVariables.map(v => v.name);\n                updateSelectedCount();\n\n                // Get initial page size from dropdown\n                pageSize = parseInt(pageSizeSelect.value);\n                totalPages = Math.ceil(filteredRows / pageSize);\n                updatePaginationInfo();\n                setupEventListeners();\n\n                // Set initial display mode explicitly\n                displayMode = 'name';\n                displayModeSelect.value = 'name';\n\n                // Signal that webview is ready, then load first page\n                vscode.postMessage({ command: 'webviewReady' });\n\n                // Load first page after signaling ready\n                setTimeout(() => loadPage(1), 100);\n            }\n\n            function populateVariablesList() {\n                if (!variablesContainer) {\n                    console.error('Variables container not found');\n                    return;\n                }\n                \n                variablesContainer.innerHTML = '';\n                \n                allVariables.forEach((variable, index) => {\n                    const item = document.createElement('div');\n                    item.className = 'variable-item';\n                    item.setAttribute('data-variable', variable.name);\n                    \n                    const checkbox = document.createElement('input');\n                    checkbox.type = 'checkbox';\n                    checkbox.className = 'variable-checkbox';\n                    checkbox.setAttribute('data-variable', variable.name);\n                    checkbox.checked = true;\n                    \n                    \n                    const span = document.createElement('span');\n                    span.className = 'variable-text';\n                    span.setAttribute('data-name', variable.name);\n                    span.setAttribute('data-label', variable.label || '');\n\n                    // Create tooltip content with proper escaping\n                    let tooltip = 'Variable: ' + variable.name;\n                    if (variable.label && variable.label !== variable.name) {\n                        tooltip += '\\nLabel: ' + variable.label;\n                    }\n                    tooltip += '\\nType: ' + variable.type;\n                    if (variable.format) {\n                        tooltip += '\\nFormat: ' + variable.format;\n                    }\n                    if (variable.length) {\n                        tooltip += '\\nLength: ' + variable.length;\n                    }\n\n                    // Use both title attribute (for native tooltip) and data-tooltip (for CSS tooltip)\n                    span.setAttribute('title', tooltip);\n                    span.setAttribute('data-tooltip', tooltip);\n                    span.innerHTML = getVariableIcon(variable) + ' ' + variable.name;\n\n                    // Ensure span is interactive\n                    span.style.pointerEvents = 'auto';\n                    span.style.cursor = 'help';\n\n                    item.appendChild(checkbox);\n                    item.appendChild(span);\n                    \n                    variablesContainer.appendChild(item);\n                    \n                });\n            }\n\n            function showMetadata() {\n                // Create metadata table HTML\n                const metadataHTML = '<table class=\"metadata-table\">' +\n                    '<thead><tr>' +\n                    '<th style=\"width: 30px;\">#</th>' +\n                    '<th>Variable</th>' +\n                    '<th>Type</th>' +\n                    '<th>Label</th>' +\n                    '<th>Format</th>' +\n                    '<th>Length</th>' +\n                    '</tr></thead><tbody>' +\n                    allVariables.map((v, index) =>\n                        '<tr>' +\n                        '<td>' + (index + 1) + '</td>' +\n                        '<td>' + getVariableIcon(v) + ' ' + v.name + '</td>' +\n                        '<td>' + v.type + '</td>' +\n                        '<td>' + (v.label || '-') + '</td>' +\n                        '<td>' + (v.format || '-') + '</td>' +\n                        '<td>' + (v.length || '-') + '</td>' +\n                        '</tr>'\n                    ).join('') +\n                    '</tbody></table>';\n\n                // Create modal overlay\n                const overlay = document.createElement('div');\n                overlay.className = 'modal-overlay';\n\n                // Create modal content\n                const modal = document.createElement('div');\n                modal.className = 'modal-content';\n\n                modal.innerHTML =\n                    '<div class=\"modal-header\">' +\n                    '<h2>\uD83D\uDCCA Variable Metadata - ' + allVariables.length + ' Variables</h2>' +\n                    '<button class=\"close-btn\" id=\"close-metadata-btn\">\u2715 Close</button>' +\n                    '</div>' +\n                    '<div class=\"modal-body\">' + metadataHTML + '</div>';\n\n                overlay.appendChild(modal);\n                document.body.appendChild(overlay);\n\n                // Close handlers\n                const closeBtn = modal.querySelector('#close-metadata-btn');\n                closeBtn.addEventListener('click', () => {\n                    document.body.removeChild(overlay);\n                });\n\n                // Close on overlay click\n                overlay.addEventListener('click', (e) => {\n                    if (e.target === overlay) {\n                        document.body.removeChild(overlay);\n                    }\n                });\n\n                // Close on Escape key\n                const escapeHandler = (e) => {\n                    if (e.key === 'Escape') {\n                        document.body.removeChild(overlay);\n                        document.removeEventListener('keydown', escapeHandler);\n                    }\n                };\n                document.addEventListener('keydown', escapeHandler);\n            }\n\n            function setupEventListeners() {\n                // Metadata button\n                metadataBtn.addEventListener('click', showMetadata);\n\n                firstBtn.addEventListener('click', () => goToPage(1));\n                prevBtn.addEventListener('click', () => goToPage(currentPage - 1));\n                nextBtn.addEventListener('click', () => goToPage(currentPage + 1));\n                lastBtn.addEventListener('click', () => goToPage(totalPages));\n                \n                pageInput.addEventListener('change', () => {\n                    const page = parseInt(pageInput.value);\n                    if (page >= 1 && page <= totalPages) {\n                        goToPage(page);\n                    } else {\n                        pageInput.value = currentPage;\n                    }\n                });\n                \n                pageInput.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter') {\n                        const page = parseInt(pageInput.value);\n                        if (page >= 1 && page <= totalPages) {\n                            goToPage(page);\n                        } else {\n                            pageInput.value = currentPage;\n                        }\n                    }\n                });\n                \n                pageSizeSelect.addEventListener('change', () => {\n                    pageSize = parseInt(pageSizeSelect.value);\n                    totalPages = Math.ceil(filteredRows / pageSize);\n                    currentPage = 1;\n                    updatePaginationInfo();\n                    loadPage(1);\n                });\n                \n                // Filter event listeners\n                applyFilterBtn.addEventListener('click', applyFilter);\n                clearFilterBtn.addEventListener('click', clearFilter);\n                whereInput.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter') {\n                        applyFilter();\n                    }\n                });\n                \n                // Variable selection event listeners\n                selectAllBtn.addEventListener('click', () => {\n                    selectAllVariables();\n                });\n                deselectAllBtn.addEventListener('click', () => {\n                    deselectAllVariables();\n                });\n\n                // KEEP and DROP functionality\n                const keepInput = document.getElementById('keep-input');\n                const dropInput = document.getElementById('drop-input');\n                const applyKeepBtn = document.getElementById('apply-keep-btn');\n                const applyDropBtn = document.getElementById('apply-drop-btn');\n\n                if (applyKeepBtn) {\n                    applyKeepBtn.addEventListener('click', () => {\n                        applyKeepVariables();\n                    });\n                }\n\n                if (applyDropBtn) {\n                    applyDropBtn.addEventListener('click', () => {\n                        applyDropVariables();\n                    });\n                }\n\n                // Allow Enter key to apply KEEP/DROP\n                if (keepInput) {\n                    keepInput.addEventListener('keypress', (e) => {\n                        if (e.key === 'Enter') {\n                            applyKeepVariables();\n                        }\n                    });\n                }\n\n                if (dropInput) {\n                    dropInput.addEventListener('keypress', (e) => {\n                        if (e.key === 'Enter') {\n                            applyDropVariables();\n                        }\n                    });\n                }\n                displayModeSelect.addEventListener('change', () => {\n                    updateDisplayMode();\n                });\n                \n                // Variable checkbox listeners - use event delegation\n                variablesContainer.addEventListener('change', (e) => {\n                    if (e.target.classList.contains('variable-checkbox')) {\n                        handleVariableSelection();\n                    }\n                });\n                \n                // Make variable items clickable\n                variablesContainer.addEventListener('click', (e) => {\n                    const item = e.target.closest('.variable-item');\n                    if (item && e.target.type !== 'checkbox') {\n                        const checkbox = item.querySelector('.variable-checkbox');\n                        if (checkbox) {\n                            checkbox.checked = !checkbox.checked;\n                            handleVariableSelection();\n                        }\n                    }\n                });\n            }\n\n            function goToPage(page) {\n                if (page >= 1 && page <= totalPages && page !== currentPage && !isLoading) {\n                    loadPage(page);\n                }\n            }\n\n            function loadPage(page) {\n                if (isLoading) return;\n\n                isLoading = true;\n                currentPage = page;\n\n                showLoading();\n                updatePaginationInfo();\n\n                const startRow = (page - 1) * pageSize;\n\n                // Request data from extension with current filter and selected variables\n                vscode.postMessage({\n                    command: 'loadData',\n                    data: {\n                        startRow: startRow,\n                        numRows: pageSize,\n                        whereClause: currentWhereClause,\n                        selectedVars: selectedColumns\n                    }\n                });\n            }\n\n            function showLoading() {\n                table.style.display = 'none';\n                errorMessage.style.display = 'none';\n                loadingMessage.style.display = 'block';\n                const loadingText = document.getElementById('loading-text');\n                if (loadingText) {\n                    loadingText.textContent = 'Loading page ' + currentPage + '...';\n                }\n\n                // Show skeleton rows for better UX\n                showSkeletonRows();\n            }\n\n            function showSkeletonRows() {\n                // Create skeleton table while loading\n                if (columns.length > 0 && table) {\n                    table.style.display = 'table';\n                    table.style.opacity = '0.5';\n                    tbody.innerHTML = '';\n\n                    // Create 5 skeleton rows\n                    for (let i = 0; i < Math.min(5, pageSize); i++) {\n                        const tr = document.createElement('tr');\n                        tr.className = 'skeleton-row';\n\n                        columns.forEach(() => {\n                            const td = document.createElement('td');\n                            td.className = 'skeleton-cell';\n                            td.innerHTML = '<div class=\"skeleton-content\"></div>';\n                            tr.appendChild(td);\n                        });\n\n                        tbody.appendChild(tr);\n                    }\n                }\n            }\n\n            function showError(message) {\n                table.style.display = 'none';\n                loadingMessage.style.display = 'none';\n                errorMessage.style.display = 'block';\n                errorMessage.textContent = 'Error: ' + message;\n                isLoading = false;\n            }\n\n            function showData() {\n                loadingMessage.style.display = 'none';\n                errorMessage.style.display = 'none';\n                table.style.display = 'table';\n                table.style.opacity = '1';\n                table.classList.add('fade-in');\n                isLoading = false;\n            }\n\n            function showNoColumnsMessage() {\n                table.style.display = 'none';\n                loadingMessage.style.display = 'none';\n                errorMessage.style.display = 'block';\n                errorMessage.textContent = 'No variables selected. Please select at least one variable to display data.';\n                errorMessage.style.backgroundColor = 'var(--vscode-inputValidation-warningBackground)';\n                errorMessage.style.color = 'var(--vscode-inputValidation-warningForeground)';\n                isLoading = false;\n            }\n\n            function hideNoColumnsMessage() {\n                if (errorMessage.textContent.includes('No variables selected')) {\n                    errorMessage.style.display = 'none';\n                    errorMessage.style.backgroundColor = 'var(--vscode-errorBackground)';\n                    errorMessage.style.color = 'var(--vscode-errorForeground)';\n                }\n            }\n\n            function applyKeepVariables() {\n                const keepInput = document.getElementById('keep-input');\n                const keepText = keepInput.value.trim();\n\n                if (!keepText) {\n                    return; // Nothing to do if empty\n                }\n\n                // Clear DROP input when KEEP is applied\n                const dropInput = document.getElementById('drop-input');\n                dropInput.value = '';\n\n                // Parse variable names (comma-separated, case-insensitive)\n                const keepVarNames = keepText.split(',').map(v => v.trim().toUpperCase()).filter(v => v);\n\n                // Create a case-insensitive lookup map\n                const variableMap = new Map();\n                allVariables.forEach(v => {\n                    variableMap.set(v.name.toUpperCase(), v.name);\n                });\n\n                // Find matching variables (case-insensitive)\n                const validKeepVars = new Set();\n                const notFound = [];\n\n                keepVarNames.forEach(varName => {\n                    if (variableMap.has(varName)) {\n                        validKeepVars.add(variableMap.get(varName));\n                    } else {\n                        notFound.push(varName);\n                    }\n                });\n\n                if (notFound.length > 0) {\n                    // Show warning but continue with valid variables\n                    const warningDiv = document.createElement('div');\n                    warningDiv.style.cssText = 'background: var(--vscode-inputValidation-warningBackground); color: var(--vscode-inputValidation-warningForeground); padding: 8px; margin: 4px 0; border-radius: 3px; font-size: 11px;';\n                    warningDiv.textContent = 'Variables not found: ' + notFound.join(', ');\n                    const container = keepInput.parentElement;\n                    const existingWarning = container.querySelector('.warning-message');\n                    if (existingWarning) {\n                        existingWarning.remove();\n                    }\n                    warningDiv.className = 'warning-message';\n                    container.appendChild(warningDiv);\n                    setTimeout(() => warningDiv.remove(), 5000);\n                }\n\n                if (validKeepVars.size > 0) {\n                    // Update all checkboxes based on KEEP list\n                    document.querySelectorAll('.variable-checkbox').forEach((cb) => {\n                        const varName = cb.dataset.variable;\n                        cb.checked = validKeepVars.has(varName);\n                    });\n\n                    // Update selection and reload\n                    updateSelectedColumns();\n                    updateSelectedCount();\n                    loadPage(currentPage);\n                }\n            }\n\n            function applyDropVariables() {\n                const dropInput = document.getElementById('drop-input');\n                const dropText = dropInput.value.trim();\n\n                if (!dropText) {\n                    return; // Nothing to do if empty\n                }\n\n                // Clear KEEP input when DROP is applied\n                const keepInput = document.getElementById('keep-input');\n                keepInput.value = '';\n\n                // Parse variable names (comma-separated, case-insensitive)\n                const dropVarNames = dropText.split(',').map(v => v.trim().toUpperCase()).filter(v => v);\n\n                // Create a case-insensitive lookup map\n                const variableMap = new Map();\n                allVariables.forEach(v => {\n                    variableMap.set(v.name.toUpperCase(), v.name);\n                });\n\n                // Find matching variables to drop (case-insensitive)\n                const validDropVars = new Set();\n                const notFound = [];\n\n                dropVarNames.forEach(varName => {\n                    if (variableMap.has(varName)) {\n                        validDropVars.add(variableMap.get(varName));\n                    } else {\n                        notFound.push(varName);\n                    }\n                });\n\n                if (notFound.length > 0) {\n                    // Show warning but continue with valid variables\n                    const warningDiv = document.createElement('div');\n                    warningDiv.style.cssText = 'background: var(--vscode-inputValidation-warningBackground); color: var(--vscode-inputValidation-warningForeground); padding: 8px; margin: 4px 0; border-radius: 3px; font-size: 11px;';\n                    warningDiv.textContent = 'Variables not found: ' + notFound.join(', ');\n                    const container = dropInput.parentElement;\n                    const existingWarning = container.querySelector('.warning-message');\n                    if (existingWarning) {\n                        existingWarning.remove();\n                    }\n                    warningDiv.className = 'warning-message';\n                    container.appendChild(warningDiv);\n                    setTimeout(() => warningDiv.remove(), 5000);\n                }\n\n                // Select all variables EXCEPT those in the DROP list\n                document.querySelectorAll('.variable-checkbox').forEach((cb) => {\n                    const varName = cb.dataset.variable;\n                    cb.checked = !validDropVars.has(varName);\n                });\n\n                // Update selection and reload\n                updateSelectedColumns();\n                updateSelectedCount();\n                loadPage(currentPage);\n            }\n\n            function applyFilter() {\n                const whereClause = whereInput.value.trim();\n                \n                currentWhereClause = whereClause;\n                currentPage = 1;\n                \n                // Update filter info\n                if (whereClause) {\n                    filterInfo.textContent = 'Filter: ' + whereClause;\n                    filterInfo.style.fontWeight = 'bold';\n                } else {\n                    filterInfo.textContent = 'No filter applied - showing all rows';\n                    filterInfo.style.fontWeight = 'normal';\n                }\n                \n                // Request filtered data count first, then load page 1\n                vscode.postMessage({\n                    command: 'applyFilter',\n                    data: {\n                        whereClause: whereClause\n                    }\n                });\n            }\n\n            function clearFilter() {\n                whereInput.value = '';\n                currentWhereClause = '';\n                filteredRows = totalRows;\n                totalPages = Math.ceil(filteredRows / pageSize);\n                currentPage = 1;\n                \n                filterInfo.textContent = 'No filter applied - showing all rows';\n                filterInfo.style.fontWeight = 'normal';\n                totalRowsDisplay.textContent = totalRows.toLocaleString();\n                \n                // Send clear filter command to backend\n                vscode.postMessage({\n                    command: 'applyFilter',\n                    data: {\n                        whereClause: '' // Empty where clause = no filter\n                    }\n                });\n                \n                updatePaginationInfo();\n            }\n\n            function updatePaginationInfo() {\n                const startRow = (currentPage - 1) * pageSize + 1;\n                const endRow = Math.min(currentPage * pageSize, filteredRows);\n                \n                currentRangeSpan.textContent = 'Showing ' + startRow.toLocaleString() + '-' + endRow.toLocaleString() + ' of ' + filteredRows.toLocaleString();\n                pageInput.value = currentPage;\n                totalPagesSpan.textContent = totalPages.toLocaleString();\n                \n                // Update button states\n                firstBtn.disabled = currentPage === 1;\n                prevBtn.disabled = currentPage === 1;\n                nextBtn.disabled = currentPage === totalPages;\n                lastBtn.disabled = currentPage === totalPages;\n                \n                pageInput.max = totalPages;\n            }\n\n            function renderTable(data, cols) {\n                // Update columns - use selected columns if available, otherwise use all\n                columns = selectedColumns.length > 0 ? selectedColumns : cols;\n                \n                // Update headers using the display mode\n                updateTableHeaders();\n\n                // Clear and rebuild body\n                tbody.innerHTML = '';\n                data.forEach((row, index) => {\n                    const tr = document.createElement('tr');\n                    \n                    columns.forEach(col => {\n                        const td = document.createElement('td');\n                        let value = row[col];\n\n                        // Format value based on variable metadata\n                        const variable = allVariables.find(v => v.name === col);\n                        if (value === null || value === undefined) {\n                            td.textContent = '';\n                            td.style.color = 'var(--vscode-disabledForeground)';\n                        } else if (typeof value === 'number') {\n                            // Format numbers based on variable metadata\n                            if (variable && variable.format) {\n                                if (variable.format === 'DOLLAR') {\n                                    td.textContent = '$' + value.toLocaleString();\n                                } else if (variable.format === 'PERCENT') {\n                                    td.textContent = (value * 100).toFixed(2) + '%';\n                                } else {\n                                    td.textContent = value.toLocaleString();\n                                }\n                            } else {\n                                td.textContent = value.toLocaleString();\n                            }\n                        } else {\n                            td.textContent = String(value);\n                        }\n\n                        td.title = td.textContent; // Tooltip for truncated content\n                        tr.appendChild(td);\n                    });\n                    \n                    tbody.appendChild(tr);\n                });\n\n                showData();\n            }\n\n            // Handle messages from extension\n            window.addEventListener('message', event => {\n                const message = event.data;\n\n                switch (message.type) {\n                    case 'initialData':\n                        renderTable(message.data, message.columns);\n                        break;\n\n                    case 'dataChunk':\n                        renderTable(message.data, message.columns);\n                        break;\n\n                    case 'filterResult':\n                        filteredRows = message.filteredRows;\n                        totalPages = Math.ceil(filteredRows / pageSize);\n                        currentPage = 1;\n                        \n                        // Update display\n                        totalRowsDisplay.textContent = filteredRows.toLocaleString();\n                        if (currentWhereClause) {\n                            filterInfo.textContent = 'Filter: ' + currentWhereClause + ' (' + filteredRows.toLocaleString() + ' rows match)';\n                        }\n                        \n                        updatePaginationInfo();\n                        loadPage(1);\n                        break;\n\n                    case 'error':\n                        console.error('Error:', message.message);\n                        showError(message.message);\n                        break;\n                }\n            });\n\n            // Variable selection functions\n            function handleVariableSelection() {\n                updateSelectedColumns();\n                updateSelectedCount();\n\n                // Reload current page with new column selection\n                if (selectedColumns.length > 0) {\n                    loadPage(currentPage);\n                }\n            }\n\n            function selectAllVariables() {\n                // Clear KEEP/DROP inputs when Select All is used\n                const keepInput = document.getElementById('keep-input');\n                const dropInput = document.getElementById('drop-input');\n                if (keepInput) keepInput.value = '';\n                if (dropInput) dropInput.value = '';\n\n                document.querySelectorAll('.variable-checkbox').forEach(cb => cb.checked = true);\n                updateSelectedColumns();\n                updateSelectedCount();\n                loadPage(currentPage);\n            }\n\n            function deselectAllVariables() {\n                // Clear KEEP/DROP inputs when Clear All is used\n                const keepInput = document.getElementById('keep-input');\n                const dropInput = document.getElementById('drop-input');\n                if (keepInput) keepInput.value = '';\n                if (dropInput) dropInput.value = '';\n\n                const checkboxes = document.querySelectorAll('.variable-checkbox');\n                checkboxes.forEach((cb) => {\n                    if (cb.dataset && cb.dataset.variable) {\n                        cb.checked = false;\n                    }\n                });\n                updateSelectedColumns();\n                updateSelectedCount();\n            }\n\n            function updateSelectedColumns() {\n                selectedColumns = [];\n                document.querySelectorAll('.variable-checkbox:checked').forEach(cb => {\n                    if (cb.dataset && cb.dataset.variable) {\n                        selectedColumns.push(cb.dataset.variable);\n                    }\n                });\n\n                // If no columns selected, show a message but don't auto-select\n                if (selectedColumns.length === 0) {\n                    showNoColumnsMessage();\n                } else {\n                    hideNoColumnsMessage();\n                }\n            }\n\n            function updateSelectedCount() {\n                const count = document.querySelectorAll('.variable-checkbox:checked').length;\n                selectedCountSpan.textContent = count + ' selected';\n            }\n\n            function updateDisplayMode() {\n                displayMode = displayModeSelect.value;\n                \n                // Update variable text display\n                document.querySelectorAll('.variable-text').forEach((span, index) => {\n                    const name = span.dataset.name;\n                    const label = span.dataset.label;\n                    const variable = allVariables.find(v => v.name === name);\n                    \n                    if (variable) {\n                        const icon = getVariableIcon(variable);\n                        let newText;\n                        \n                        if (displayMode === 'name') {\n                            newText = icon + ' ' + name;\n                        } else if (displayMode === 'label' && label) {\n                            newText = icon + ' ' + label;\n                        } else if (displayMode === 'both' && label && label !== name) {\n                            newText = icon + ' ' + name + ' (' + label + ')';\n                        } else {\n                            newText = icon + ' ' + name;\n                        }\n                        \n                        span.innerHTML = newText;\n                        \n                        // Add comprehensive tooltip\n                        let tooltip = 'Variable: ' + name;\n                        if (label && label !== name) {\n                            tooltip += '\\nLabel: ' + label;\n                        }\n                        tooltip += '\\nType: ' + variable.type;\n                        if (variable.format) {\n                            tooltip += '\\nFormat: ' + variable.format;\n                        }\n                        if (variable.length) {\n                            tooltip += '\\nLength: ' + variable.length;\n                        }\n                        \n                        // Use both attributes for better compatibility\n                        span.setAttribute('title', tooltip);\n                        span.setAttribute('data-tooltip', tooltip);\n                        \n                    }\n                });\n                \n                // Update table headers\n                updateTableHeaders();\n            }\n\n            function updateTableHeaders() {\n                if (selectedColumns.length === 0) return;\n                \n                header.innerHTML = '';\n                selectedColumns.forEach(colName => {\n                    const variable = allVariables.find(v => v.name === colName);\n                    const th = document.createElement('th');\n                    \n                    if (variable) {\n                        if (displayMode === 'name') {\n                            th.textContent = variable.name;\n                        } else if (displayMode === 'label' && variable.label) {\n                            th.textContent = variable.label;\n                        } else if (displayMode === 'both' && variable.label && variable.label !== variable.name) {\n                            th.textContent = variable.name + ' (' + variable.label + ')';\n                        } else {\n                            th.textContent = variable.name;\n                        }\n                        // Create comprehensive tooltip for table headers\n                        let headerTooltip = 'Variable: ' + variable.name;\n                        if (variable.label && variable.label !== variable.name) {\n                            headerTooltip += '\\nLabel: ' + variable.label;\n                        }\n                        headerTooltip += '\\nType: ' + variable.type;\n                        if (variable.format) {\n                            headerTooltip += '\\nFormat: ' + variable.format;\n                        }\n                        if (variable.length) {\n                            headerTooltip += '\\nLength: ' + variable.length;\n                        }\n                        // Only use data-tooltip for CSS styling (no native title tooltip)\n                        th.setAttribute('data-tooltip', headerTooltip);\n                    } else {\n                        th.textContent = colName;\n                    }\n                    \n                    header.appendChild(th);\n                });\n            }\n\n            // Initialize when DOM is ready\n            if (document.readyState === 'loading') {\n                document.addEventListener('DOMContentLoaded', () => {\n                    init();\n                });\n            } else {\n                init();\n            }\n        </script>\n    </body>\n    </html>");
}
